 

services:
  # Frontend Service - Interfaz web para el usuario
  frontend:
    build:
      context: ./nodejs-services/frontend
      dockerfile: Dockerfile
    container_name: tinkubot-frontend
    ports:
      - "5000:5000"
    environment:
      - WHATSAPP_CLIENTES_URL=http://wa-clientes:5001
      - WHATSAPP_PROVEEDORES_URL=http://wa-proveedores:5002
      - FRONTEND_PORT=5000
      - NODE_ENV=production
    networks:
      - tinkubot-network
    restart: unless-stopped

  # WhatsApp Service - Bot Clientes (+593 99 882 3053)
  wa-clientes:
    build:
      context: ./nodejs-services/wa-clientes
      dockerfile: Dockerfile
    container_name: tinkubot-wa-clientes
    ports:
      - "5001:5001"
    environment:
      # ACTUALIZADO: Usa el AI Service Clientes específico para esta instancia
      - AI_SERVICE_CLIENTES_URL=http://ai-clientes:8001
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_BACKEND_API_KEY=${SUPABASE_BACKEND_API_KEY}
      - SUPABASE_BUCKET_NAME=${SUPABASE_BUCKET_NAME}
      - WHATSAPP_PORT=5001
      - NODE_ENV=production
    networks:
      - tinkubot-network
    restart: unless-stopped

  # WhatsApp Service - Bot Proveedores (segundo número)
  wa-proveedores:
    build:
      context: ./nodejs-services/wa-proveedores
      dockerfile: Dockerfile
    container_name: tinkubot-wa-proveedores
    ports:
      - "5002:5002"
    environment:
      # ACTUALIZADO: Usa el AI Service Proveedores específico para esta instancia
      - PROVEEDORES_AI_SERVICE_URL=http://ai-proveedores:8002
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_BACKEND_API_KEY=${SUPABASE_BACKEND_API_KEY}
      - SUPABASE_BUCKET_NAME=${SUPABASE_BUCKET_NAME}
      - WHATSAPP_PORT=5002
      - NODE_ENV=production
    networks:
      - tinkubot-network
    restart: unless-stopped

  # AI Service Clientes - Procesamiento con sesiones integradas
  ai-clientes:
    build:
      context: ./python-services
      dockerfile: ai-clientes/Dockerfile
    container_name: tinkubot-ai-clientes
    ports:
      - "8001:8001"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_URL=${REDIS_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_BACKEND_API_KEY=${SUPABASE_BACKEND_API_KEY}
      - NODE_ENV=production
    networks:
      - tinkubot-network
    restart: unless-stopped

  # AI Service Proveedores - Procesamiento con sesiones integradas
  ai-proveedores:
    build:
      context: ./python-services
      dockerfile: ai-proveedores/Dockerfile
    container_name: tinkubot-ai-proveedores
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_URL=${REDIS_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_BACKEND_API_KEY=${SUPABASE_BACKEND_API_KEY}
      - NODE_ENV=production
    networks:
      - tinkubot-network
    restart: unless-stopped

  # Search Token Service - Servicio de búsqueda con tokenización
  search-token:
    build:
      context: ./python-services
      dockerfile: search-token/Dockerfile
    container_name: tinkubot-search-token
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_BACKEND_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - API_PORT=8000
      - NODE_ENV=production
    networks:
      - tinkubot-network
    restart: unless-stopped

  

networks:
  tinkubot-network:
    driver: bridge
